/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type RatesStruct = {
  managementRate: BigNumberish;
  performanceRate: BigNumberish;
};

export type RatesStructOutput = [number, number] & {
  managementRate: number;
  performanceRate: number;
};

export declare namespace Roles {
  export type RolesStorageStruct = {
    whitelistManager: string;
    feeReceiver: string;
    safe: string;
    feeRegistry: string;
    valuationManager: string;
  };

  export type RolesStorageStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    whitelistManager: string;
    feeReceiver: string;
    safe: string;
    feeRegistry: string;
    valuationManager: string;
  };
}

export declare namespace Vault {
  export type InitStructStruct = {
    underlying: string;
    name: string;
    symbol: string;
    safe: string;
    whitelistManager: string;
    valuationManager: string;
    admin: string;
    feeReceiver: string;
    feeRegistry: string;
    wrappedNativeToken: string;
    managementRate: BigNumberish;
    performanceRate: BigNumberish;
    enableWhitelist: boolean;
    rateUpdateCooldown: BigNumberish;
  };

  export type InitStructStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    boolean,
    BigNumber
  ] & {
    underlying: string;
    name: string;
    symbol: string;
    safe: string;
    whitelistManager: string;
    valuationManager: string;
    admin: string;
    feeReceiver: string;
    feeRegistry: string;
    wrappedNativeToken: string;
    managementRate: number;
    performanceRate: number;
    enableWhitelist: boolean;
    rateUpdateCooldown: BigNumber;
  };
}

export interface VaultInterface extends utils.Interface {
  functions: {
    "MAX_MANAGEMENT_RATE()": FunctionFragment;
    "MAX_PERFORMANCE_RATE()": FunctionFragment;
    "MAX_PROTOCOL_RATE()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addToWhitelist(address[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelRequestDeposit()": FunctionFragment;
    "claimSharesAndRequestRedeem(uint256)": FunctionFragment;
    "claimableDepositRequest(uint256,address)": FunctionFragment;
    "claimableRedeemRequest(uint256,address)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToAssets(uint256,uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "convertToShares(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256,address,address)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "disableWhitelist()": FunctionFragment;
    "feeRates()": FunctionFragment;
    "getRolesStorage()": FunctionFragment;
    "highWaterMark()": FunctionFragment;
    "initialize((address,string,string,address,address,address,address,address,address,address,uint16,uint16,bool,uint256))": FunctionFragment;
    "initiateClosing()": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isWhitelistActivated()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "lastDepositRequestId(address)": FunctionFragment;
    "lastFeeTime()": FunctionFragment;
    "lastRedeemRequestId(address)": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "mint(uint256,address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingDepositRequest(uint256,address)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pendingRedeemRequest(uint256,address)": FunctionFragment;
    "pendingSilo()": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestDeposit(uint256,address,address)": FunctionFragment;
    "requestDeposit(uint256,address,address,address)": FunctionFragment;
    "requestRedeem(uint256,address,address)": FunctionFragment;
    "revokeFromWhitelist(address[])": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "settleDeposit(uint256)": FunctionFragment;
    "settleRedeem(uint256)": FunctionFragment;
    "share()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateFeeReceiver(address)": FunctionFragment;
    "updateNewTotalAssets(uint256)": FunctionFragment;
    "updateRates((uint16,uint16))": FunctionFragment;
    "updateValuationManager(address)": FunctionFragment;
    "updateWhitelistManager(address)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_MANAGEMENT_RATE"
      | "MAX_PERFORMANCE_RATE"
      | "MAX_PROTOCOL_RATE"
      | "acceptOwnership"
      | "addToWhitelist"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "cancelRequestDeposit"
      | "claimSharesAndRequestRedeem"
      | "claimableDepositRequest"
      | "claimableRedeemRequest"
      | "close"
      | "convertToAssets(uint256)"
      | "convertToAssets(uint256,uint256)"
      | "convertToShares(uint256)"
      | "convertToShares(uint256,uint256)"
      | "decimals"
      | "deposit(uint256,address,address)"
      | "deposit(uint256,address)"
      | "disableWhitelist"
      | "feeRates"
      | "getRolesStorage"
      | "highWaterMark"
      | "initialize"
      | "initiateClosing"
      | "isOperator"
      | "isWhitelistActivated"
      | "isWhitelisted"
      | "lastDepositRequestId"
      | "lastFeeTime"
      | "lastRedeemRequestId"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint(uint256,address)"
      | "mint(uint256,address,address)"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "pendingDepositRequest"
      | "pendingOwner"
      | "pendingRedeemRequest"
      | "pendingSilo"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "redeem"
      | "renounceOwnership"
      | "requestDeposit(uint256,address,address)"
      | "requestDeposit(uint256,address,address,address)"
      | "requestRedeem"
      | "revokeFromWhitelist"
      | "setOperator"
      | "settleDeposit"
      | "settleRedeem"
      | "share"
      | "supportsInterface"
      | "symbol"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "updateFeeReceiver"
      | "updateNewTotalAssets"
      | "updateRates"
      | "updateValuationManager"
      | "updateWhitelistManager"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_MANAGEMENT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERFORMANCE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelRequestDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimSharesAndRequestRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableDepositRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRedeemRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "convertToAssets(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeRates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRolesStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highWaterMark",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [Vault.InitStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateClosing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDepositRequestId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRedeemRequestId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "maxDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "maxMint", values: [string]): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDepositRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRedeemRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSilo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDeposit(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDeposit(uint256,address,address,address)",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedeem",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFromWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settleDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "share", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNewTotalAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values: [RatesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValuationManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_MANAGEMENT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERFORMANCE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequestDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSharesAndRequestRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRedeemRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRolesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highWaterMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDepositRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRedeemRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRedeemRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSilo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDeposit(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDeposit(uint256,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "share", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNewTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValuationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "DepositRequest(address,address,uint256,address,uint256)": EventFragment;
    "DepositRequestCanceled(uint256,address)": EventFragment;
    "FeeReceiverUpdated(address,address)": EventFragment;
    "HighWaterMarkUpdated(uint256,uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "NewTotalAssetsUpdated(uint256)": EventFragment;
    "OperatorSet(address,address,bool)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RatesUpdated((uint16,uint16),(uint16,uint16),uint256)": EventFragment;
    "RedeemRequest(address,address,uint256,address,uint256)": EventFragment;
    "Referral(address,address,uint256,uint256)": EventFragment;
    "SettleDeposit(uint40,uint40,uint256,uint256,uint256,uint256)": EventFragment;
    "SettleRedeem(uint40,uint40,uint256,uint256,uint256,uint256)": EventFragment;
    "StateUpdated(uint8)": EventFragment;
    "TotalAssetsUpdated(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "ValuationManagerUpdated(address,address)": EventFragment;
    "WhitelistDisabled()": EventFragment;
    "WhitelistManagerUpdated(address,address)": EventFragment;
    "WhitelistUpdated(address,bool)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRequestCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighWaterMarkUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTotalAssetsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Referral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalAssetsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValuationManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositRequestEventObject {
  controller: string;
  owner: string;
  requestId: BigNumber;
  sender: string;
  assets: BigNumber;
}
export type DepositRequestEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  DepositRequestEventObject
>;

export type DepositRequestEventFilter = TypedEventFilter<DepositRequestEvent>;

export interface DepositRequestCanceledEventObject {
  requestId: BigNumber;
  controller: string;
}
export type DepositRequestCanceledEvent = TypedEvent<
  [BigNumber, string],
  DepositRequestCanceledEventObject
>;

export type DepositRequestCanceledEventFilter =
  TypedEventFilter<DepositRequestCanceledEvent>;

export interface FeeReceiverUpdatedEventObject {
  oldReceiver: string;
  newReceiver: string;
}
export type FeeReceiverUpdatedEvent = TypedEvent<
  [string, string],
  FeeReceiverUpdatedEventObject
>;

export type FeeReceiverUpdatedEventFilter =
  TypedEventFilter<FeeReceiverUpdatedEvent>;

export interface HighWaterMarkUpdatedEventObject {
  oldHighWaterMark: BigNumber;
  newHighWaterMark: BigNumber;
}
export type HighWaterMarkUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  HighWaterMarkUpdatedEventObject
>;

export type HighWaterMarkUpdatedEventFilter =
  TypedEventFilter<HighWaterMarkUpdatedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewTotalAssetsUpdatedEventObject {
  totalAssets: BigNumber;
}
export type NewTotalAssetsUpdatedEvent = TypedEvent<
  [BigNumber],
  NewTotalAssetsUpdatedEventObject
>;

export type NewTotalAssetsUpdatedEventFilter =
  TypedEventFilter<NewTotalAssetsUpdatedEvent>;

export interface OperatorSetEventObject {
  controller: string;
  operator: string;
  approved: boolean;
}
export type OperatorSetEvent = TypedEvent<
  [string, string, boolean],
  OperatorSetEventObject
>;

export type OperatorSetEventFilter = TypedEventFilter<OperatorSetEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RatesUpdatedEventObject {
  oldRates: RatesStructOutput;
  newRate: RatesStructOutput;
  timestamp: BigNumber;
}
export type RatesUpdatedEvent = TypedEvent<
  [RatesStructOutput, RatesStructOutput, BigNumber],
  RatesUpdatedEventObject
>;

export type RatesUpdatedEventFilter = TypedEventFilter<RatesUpdatedEvent>;

export interface RedeemRequestEventObject {
  controller: string;
  owner: string;
  requestId: BigNumber;
  sender: string;
  shares: BigNumber;
}
export type RedeemRequestEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  RedeemRequestEventObject
>;

export type RedeemRequestEventFilter = TypedEventFilter<RedeemRequestEvent>;

export interface ReferralEventObject {
  referral: string;
  owner: string;
  requestId: BigNumber;
  assets: BigNumber;
}
export type ReferralEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ReferralEventObject
>;

export type ReferralEventFilter = TypedEventFilter<ReferralEvent>;

export interface SettleDepositEventObject {
  epochId: number;
  settledId: number;
  totalAssets: BigNumber;
  totalSupply: BigNumber;
  assetsDeposited: BigNumber;
  sharesMinted: BigNumber;
}
export type SettleDepositEvent = TypedEvent<
  [number, number, BigNumber, BigNumber, BigNumber, BigNumber],
  SettleDepositEventObject
>;

export type SettleDepositEventFilter = TypedEventFilter<SettleDepositEvent>;

export interface SettleRedeemEventObject {
  epochId: number;
  settledId: number;
  totalAssets: BigNumber;
  totalSupply: BigNumber;
  assetsWithdrawed: BigNumber;
  sharesBurned: BigNumber;
}
export type SettleRedeemEvent = TypedEvent<
  [number, number, BigNumber, BigNumber, BigNumber, BigNumber],
  SettleRedeemEventObject
>;

export type SettleRedeemEventFilter = TypedEventFilter<SettleRedeemEvent>;

export interface StateUpdatedEventObject {
  state: number;
}
export type StateUpdatedEvent = TypedEvent<[number], StateUpdatedEventObject>;

export type StateUpdatedEventFilter = TypedEventFilter<StateUpdatedEvent>;

export interface TotalAssetsUpdatedEventObject {
  totalAssets: BigNumber;
}
export type TotalAssetsUpdatedEvent = TypedEvent<
  [BigNumber],
  TotalAssetsUpdatedEventObject
>;

export type TotalAssetsUpdatedEventFilter =
  TypedEventFilter<TotalAssetsUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ValuationManagerUpdatedEventObject {
  oldManager: string;
  newManager: string;
}
export type ValuationManagerUpdatedEvent = TypedEvent<
  [string, string],
  ValuationManagerUpdatedEventObject
>;

export type ValuationManagerUpdatedEventFilter =
  TypedEventFilter<ValuationManagerUpdatedEvent>;

export interface WhitelistDisabledEventObject {}
export type WhitelistDisabledEvent = TypedEvent<
  [],
  WhitelistDisabledEventObject
>;

export type WhitelistDisabledEventFilter =
  TypedEventFilter<WhitelistDisabledEvent>;

export interface WhitelistManagerUpdatedEventObject {
  oldManager: string;
  newManager: string;
}
export type WhitelistManagerUpdatedEvent = TypedEvent<
  [string, string],
  WhitelistManagerUpdatedEventObject
>;

export type WhitelistManagerUpdatedEventFilter =
  TypedEventFilter<WhitelistManagerUpdatedEvent>;

export interface WhitelistUpdatedEventObject {
  account: string;
  authorized: boolean;
}
export type WhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  WhitelistUpdatedEventObject
>;

export type WhitelistUpdatedEventFilter =
  TypedEventFilter<WhitelistUpdatedEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_MANAGEMENT_RATE(overrides?: CallOverrides): Promise<[number]>;

    MAX_PERFORMANCE_RATE(overrides?: CallOverrides): Promise<[number]>;

    MAX_PROTOCOL_RATE(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addToWhitelist(
      accounts: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelRequestDeposit(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimSharesAndRequestRedeem(
      sharesToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimableDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    claimableRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    close(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "convertToAssets(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convertToAssets(uint256,uint256)"(
      shares: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convertToShares(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convertToShares(uint256,uint256)"(
      assets: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "deposit(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    disableWhitelist(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeRates(overrides?: CallOverrides): Promise<[RatesStructOutput]>;

    getRolesStorage(
      overrides?: CallOverrides
    ): Promise<
      [Roles.RolesStorageStructOutput] & {
        _rolesStorage: Roles.RolesStorageStructOutput;
      }
    >;

    highWaterMark(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      init: Vault.InitStructStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initiateClosing(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isOperator(
      controller: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistActivated(overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastDepositRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    lastFeeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRedeemRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    maxDeposit(
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxMint(
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxRedeem(
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxWithdraw(
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "mint(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pendingRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    pendingSilo(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "requestDeposit(uint256,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "requestDeposit(uint256,address,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      referral: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestRedeem(
      shares: BigNumberish,
      controller: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeFromWhitelist(
      accounts: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleDeposit(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleRedeem(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    share(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateNewTotalAssets(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRates(
      newRates: RatesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateValuationManager(
      _valuationManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateWhitelistManager(
      _whitelistManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAX_MANAGEMENT_RATE(overrides?: CallOverrides): Promise<number>;

  MAX_PERFORMANCE_RATE(overrides?: CallOverrides): Promise<number>;

  MAX_PROTOCOL_RATE(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addToWhitelist(
    accounts: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelRequestDeposit(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimSharesAndRequestRedeem(
    sharesToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimableDepositRequest(
    requestId: BigNumberish,
    controller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableRedeemRequest(
    requestId: BigNumberish,
    controller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  close(
    _newTotalAssets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "convertToAssets(uint256)"(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertToAssets(uint256,uint256)"(
    shares: BigNumberish,
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertToShares(uint256)"(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertToShares(uint256,uint256)"(
    assets: BigNumberish,
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "deposit(uint256,address,address)"(
    assets: BigNumberish,
    receiver: string,
    controller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  disableWhitelist(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeRates(overrides?: CallOverrides): Promise<RatesStructOutput>;

  getRolesStorage(
    overrides?: CallOverrides
  ): Promise<Roles.RolesStorageStructOutput>;

  highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    init: Vault.InitStructStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initiateClosing(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isOperator(
    controller: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistActivated(overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

  lastDepositRequestId(
    controller: string,
    overrides?: CallOverrides
  ): Promise<number>;

  lastFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

  lastRedeemRequestId(
    controller: string,
    overrides?: CallOverrides
  ): Promise<number>;

  maxDeposit(controller: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(controller: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(controller: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(
    controller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mint(uint256,address)"(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "mint(uint256,address,address)"(
    shares: BigNumberish,
    receiver: string,
    controller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingDepositRequest(
    requestId: BigNumberish,
    controller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pendingRedeemRequest(
    requestId: BigNumberish,
    controller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingSilo(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    shares: BigNumberish,
    receiver: string,
    controller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "requestDeposit(uint256,address,address)"(
    assets: BigNumberish,
    controller: string,
    owner: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "requestDeposit(uint256,address,address,address)"(
    assets: BigNumberish,
    controller: string,
    owner: string,
    referral: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestRedeem(
    shares: BigNumberish,
    controller: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeFromWhitelist(
    accounts: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleDeposit(
    _newTotalAssets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleRedeem(
    _newTotalAssets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  share(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFeeReceiver(
    _feeReceiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateNewTotalAssets(
    _newTotalAssets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRates(
    newRates: RatesStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateValuationManager(
    _valuationManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateWhitelistManager(
    _whitelistManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    assets: BigNumberish,
    receiver: string,
    controller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_MANAGEMENT_RATE(overrides?: CallOverrides): Promise<number>;

    MAX_PERFORMANCE_RATE(overrides?: CallOverrides): Promise<number>;

    MAX_PROTOCOL_RATE(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addToWhitelist(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelRequestDeposit(overrides?: CallOverrides): Promise<void>;

    claimSharesAndRequestRedeem(
      sharesToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    claimableDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      _newTotalAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "convertToAssets(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToAssets(uint256,uint256)"(
      shares: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToShares(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToShares(uint256,uint256)"(
      assets: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "deposit(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableWhitelist(overrides?: CallOverrides): Promise<void>;

    feeRates(overrides?: CallOverrides): Promise<RatesStructOutput>;

    getRolesStorage(
      overrides?: CallOverrides
    ): Promise<Roles.RolesStorageStructOutput>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      init: Vault.InitStructStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateClosing(overrides?: CallOverrides): Promise<void>;

    isOperator(
      controller: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistActivated(overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

    lastDepositRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<number>;

    lastFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<number>;

    maxDeposit(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(controller: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pendingRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingSilo(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "requestDeposit(uint256,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requestDeposit(uint256,address,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      referral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRedeem(
      shares: BigNumberish,
      controller: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeFromWhitelist(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    settleDeposit(
      _newTotalAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleRedeem(
      _newTotalAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    share(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateFeeReceiver(
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNewTotalAssets(
      _newTotalAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRates(
      newRates: RatesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateValuationManager(
      _valuationManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelistManager(
      _whitelistManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "DepositRequest(address,address,uint256,address,uint256)"(
      controller?: string | null,
      owner?: string | null,
      requestId?: BigNumberish | null,
      sender?: null,
      assets?: null
    ): DepositRequestEventFilter;
    DepositRequest(
      controller?: string | null,
      owner?: string | null,
      requestId?: BigNumberish | null,
      sender?: null,
      assets?: null
    ): DepositRequestEventFilter;

    "DepositRequestCanceled(uint256,address)"(
      requestId?: BigNumberish | null,
      controller?: string | null
    ): DepositRequestCanceledEventFilter;
    DepositRequestCanceled(
      requestId?: BigNumberish | null,
      controller?: string | null
    ): DepositRequestCanceledEventFilter;

    "FeeReceiverUpdated(address,address)"(
      oldReceiver?: null,
      newReceiver?: null
    ): FeeReceiverUpdatedEventFilter;
    FeeReceiverUpdated(
      oldReceiver?: null,
      newReceiver?: null
    ): FeeReceiverUpdatedEventFilter;

    "HighWaterMarkUpdated(uint256,uint256)"(
      oldHighWaterMark?: null,
      newHighWaterMark?: null
    ): HighWaterMarkUpdatedEventFilter;
    HighWaterMarkUpdated(
      oldHighWaterMark?: null,
      newHighWaterMark?: null
    ): HighWaterMarkUpdatedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewTotalAssetsUpdated(uint256)"(
      totalAssets?: null
    ): NewTotalAssetsUpdatedEventFilter;
    NewTotalAssetsUpdated(totalAssets?: null): NewTotalAssetsUpdatedEventFilter;

    "OperatorSet(address,address,bool)"(
      controller?: string | null,
      operator?: string | null,
      approved?: null
    ): OperatorSetEventFilter;
    OperatorSet(
      controller?: string | null,
      operator?: string | null,
      approved?: null
    ): OperatorSetEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RatesUpdated((uint16,uint16),(uint16,uint16),uint256)"(
      oldRates?: null,
      newRate?: null,
      timestamp?: null
    ): RatesUpdatedEventFilter;
    RatesUpdated(
      oldRates?: null,
      newRate?: null,
      timestamp?: null
    ): RatesUpdatedEventFilter;

    "RedeemRequest(address,address,uint256,address,uint256)"(
      controller?: string | null,
      owner?: string | null,
      requestId?: BigNumberish | null,
      sender?: null,
      shares?: null
    ): RedeemRequestEventFilter;
    RedeemRequest(
      controller?: string | null,
      owner?: string | null,
      requestId?: BigNumberish | null,
      sender?: null,
      shares?: null
    ): RedeemRequestEventFilter;

    "Referral(address,address,uint256,uint256)"(
      referral?: string | null,
      owner?: string | null,
      requestId?: BigNumberish | null,
      assets?: null
    ): ReferralEventFilter;
    Referral(
      referral?: string | null,
      owner?: string | null,
      requestId?: BigNumberish | null,
      assets?: null
    ): ReferralEventFilter;

    "SettleDeposit(uint40,uint40,uint256,uint256,uint256,uint256)"(
      epochId?: BigNumberish | null,
      settledId?: BigNumberish | null,
      totalAssets?: null,
      totalSupply?: null,
      assetsDeposited?: null,
      sharesMinted?: null
    ): SettleDepositEventFilter;
    SettleDeposit(
      epochId?: BigNumberish | null,
      settledId?: BigNumberish | null,
      totalAssets?: null,
      totalSupply?: null,
      assetsDeposited?: null,
      sharesMinted?: null
    ): SettleDepositEventFilter;

    "SettleRedeem(uint40,uint40,uint256,uint256,uint256,uint256)"(
      epochId?: BigNumberish | null,
      settledId?: BigNumberish | null,
      totalAssets?: null,
      totalSupply?: null,
      assetsWithdrawed?: null,
      sharesBurned?: null
    ): SettleRedeemEventFilter;
    SettleRedeem(
      epochId?: BigNumberish | null,
      settledId?: BigNumberish | null,
      totalAssets?: null,
      totalSupply?: null,
      assetsWithdrawed?: null,
      sharesBurned?: null
    ): SettleRedeemEventFilter;

    "StateUpdated(uint8)"(state?: null): StateUpdatedEventFilter;
    StateUpdated(state?: null): StateUpdatedEventFilter;

    "TotalAssetsUpdated(uint256)"(
      totalAssets?: null
    ): TotalAssetsUpdatedEventFilter;
    TotalAssetsUpdated(totalAssets?: null): TotalAssetsUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "ValuationManagerUpdated(address,address)"(
      oldManager?: null,
      newManager?: null
    ): ValuationManagerUpdatedEventFilter;
    ValuationManagerUpdated(
      oldManager?: null,
      newManager?: null
    ): ValuationManagerUpdatedEventFilter;

    "WhitelistDisabled()"(): WhitelistDisabledEventFilter;
    WhitelistDisabled(): WhitelistDisabledEventFilter;

    "WhitelistManagerUpdated(address,address)"(
      oldManager?: null,
      newManager?: null
    ): WhitelistManagerUpdatedEventFilter;
    WhitelistManagerUpdated(
      oldManager?: null,
      newManager?: null
    ): WhitelistManagerUpdatedEventFilter;

    "WhitelistUpdated(address,bool)"(
      account?: string | null,
      authorized?: null
    ): WhitelistUpdatedEventFilter;
    WhitelistUpdated(
      account?: string | null,
      authorized?: null
    ): WhitelistUpdatedEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_MANAGEMENT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addToWhitelist(
      accounts: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelRequestDeposit(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimSharesAndRequestRedeem(
      sharesToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimableDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "convertToAssets(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToAssets(uint256,uint256)"(
      shares: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToShares(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToShares(uint256,uint256)"(
      assets: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    disableWhitelist(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeRates(overrides?: CallOverrides): Promise<BigNumber>;

    getRolesStorage(overrides?: CallOverrides): Promise<BigNumber>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      init: Vault.InitStructStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initiateClosing(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isOperator(
      controller: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistActivated(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastDepositRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeposit(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(controller: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "mint(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingSilo(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "requestDeposit(uint256,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "requestDeposit(uint256,address,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      referral: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    requestRedeem(
      shares: BigNumberish,
      controller: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeFromWhitelist(
      accounts: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleDeposit(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleRedeem(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    share(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateNewTotalAssets(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRates(
      newRates: RatesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateValuationManager(
      _valuationManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateWhitelistManager(
      _whitelistManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_MANAGEMENT_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PERFORMANCE_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PROTOCOL_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      accounts: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelRequestDeposit(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimSharesAndRequestRedeem(
      sharesToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimableDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "convertToAssets(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertToAssets(uint256,uint256)"(
      shares: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertToShares(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertToShares(uint256,uint256)"(
      assets: BigNumberish,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deposit(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    disableWhitelist(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolesStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highWaterMark(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      init: Vault.InitStructStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initiateClosing(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isOperator(
      controller: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistActivated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDepositRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastFeeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRedeemRequestId(
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDepositRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRedeemRequest(
      requestId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingSilo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "requestDeposit(uint256,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "requestDeposit(uint256,address,address,address)"(
      assets: BigNumberish,
      controller: string,
      owner: string,
      referral: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestRedeem(
      shares: BigNumberish,
      controller: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeFromWhitelist(
      accounts: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleDeposit(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleRedeem(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    share(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateNewTotalAssets(
      _newTotalAssets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRates(
      newRates: RatesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateValuationManager(
      _valuationManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateWhitelistManager(
      _whitelistManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
